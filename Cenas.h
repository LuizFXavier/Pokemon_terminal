#ifndef CENAS_H
#define CENAS_H

#include <conio2.h>

#include "Player.h"

class Cenas:public Player{
	
	public:
		int cenario[16][16];
		int cmx, cmy, tmx, tmy, final;
		 
		
		void setcenario(int at);
		void playerposition(int atual, int anterior, bool troca);
		void imprimir();
		
		void resetarCena(int anterior);
		
		struct maam{			 /*0,1,2,3,4,5,6,7,8,9*/
		int quarto[16][16] = {{7,7,7,7,7,7,7,7,3,3,7,0,0,0,0,0}, //0
							  {7,14,0,0,0,0,0,0,0,0,7,0,0,0,0,0},
							  {7,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0},
							  {7,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0},
							  {7,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0},
							  {7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};
		
		int sala[16][16] =   {{7,7,7,7,7,7,7,7,3,3,7,0,0,0,0,0}, //1
							  {7,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0},
							  {7,0,5,5,0,0,0,0,0,0,7,0,0,0,0,0},
							  {7,0,5,5,6,0,0,0,0,0,7,0,0,0,0,0},
							  {7,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0},
							  {7,7,7,7,7,7,7,7,3,7,7,0,0,0,0,0},
							  {7,7,7,7,7,7,7,7,3,7,7,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};
		
  int frentecasa[16][16] =   {{7,7,7,7,7,7,7,7,7,2,2,0,0,0,0,0}, //2
							  {4,4,4,4,4,4,4,4,4,2,2,4,4,4,4,4},
							  {4,4,4,9,9,9,4,4,4,2,2,4,4,4,4,4},
							  {4,4,9,9,9,9,9,4,4,2,2,4,4,4,4,4},
							  {4,4,5,2,5,5,5,4,4,2,2,4,4,4,4,4},
							  {4,11,5,5,5,3,5,4,4,2,2,4,4,4,4,4},
							  {4,4,4,4,4,2,2,2,2,2,2,4,4,4,4,4},
							  {4,4,4,4,4,4,4,4,4,2,2,4,4,4,4,4},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};
							  
int frenteviz[16][16] =      {{2,2,2,7,7,7,7,7,7,7,7,7,7,0,0,0}, //3
							  {2,2,2,4,4,4,4,4,4,4,4,4,7,0,0,0},
							  {2,2,2,4,4,4,9,9,9,4,4,4,7,0,0,0},
							  {2,2,2,4,4,9,9,9,9,9,4,4,7,0,0,0},
							  {2,2,2,4,4,7,7,7,2,7,4,4,7,0,0,0},
							  {2,2,2,4,4,7,3,7,7,7,11,4,7,0,0,0},
							  {2,2,2,2,2,2,2,4,4,4,4,4,7,0,0,0},
							  {2,2,2,4,4,4,4,4,4,4,4,4,7,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};					  
		
	 int salaviz[16][16] =   {{9,3,3,9,9,9,9,9,9,9,9,0,0,0,0,0}, //4
							  {9,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0},
							  {9,0,0,0,0,0,0,5,5,0,9,0,0,0,0,0},
							  {9,0,0,0,0,0,6,5,5,0,9,0,0,0,0,0},
							  {9,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0},
							  {9,9,3,9,9,9,9,9,9,9,9,0,0,0,0,0},
							  {7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};
							  
	int quartoviz[16][16] =  {{9,3,3,9,9,9,9,9,9,9,9,0,0,0,0,0}, //5
							  {9,0,0,0,0,0,0,0,0,14,9,0,0,0,0,0},
							  {9,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0},
							  {9,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0},
							  {9,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0},
							  {9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};
							  
	int praca[16][16] =      {{2,2,2,2,2,2,2,2,2,2,2,2,7,0,0,0}, //6
							  {0,2,2,4,4,4,4,4,4,4,4,4,7,0,0,0},
							  {0,2,2,11,4,4,4,4,4,8,4,4,7,0,0,0},
							  {0,2,2,4,4,4,5,5,5,4,4,4,7,0,0,0},
							  {0,2,2,4,4,5,13,13,13,5,4,4,7,0,0,0},
							  {0,2,2,4,4,5,13,13,13,5,4,4,7,0,0,0},
							  {0,2,2,4,4,4,5,5,5,4,4,4,7,0,0,0},
							  {0,2,2,4,8,4,4,4,4,4,4,4,7,0,0,0},
							  {0,13,13,4,4,4,4,4,4,4,4,4,7,0,0,0},
							  {0,0,0,0,7,7,7,7,7,7,7,7,7,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};
		
							 /*0,1,2,3,4,5,6,7,8,9*/
							  
	int frentelab[16][16] =  {{0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0}, //7
							  {4,4,4,4,4,4,4,4,4,2,2,0,4,4,4,4},
							  {4,9,9,9,9,9,9,9,4,2,2,0,4,4,4,4},
							  {4,7,7,7,7,7,7,7,4,2,2,0,4,4,4,4},
							  {4,7,2,2,2,2,2,7,4,2,2,0,4,4,4,4},
							  {4,7,7,7,7,7,7,7,4,2,2,0,4,4,4,4},
							  {4,7,7,7,3,7,7,7,11,2,2,0,4,4,4,4},
							  {4,4,4,2,2,2,2,2,2,2,2,0,0,4,4,4},
							  {4,4,4,4,4,4,4,4,4,13,13,0,0,0,0,0},
							  {7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};
							  
	int dentroLab[16][16] =  {{5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0}, //8
							  {5,0,0,0,0,0,0,4,9,13,5,0,0,0,0,0},
							  {5,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0},
							  {5,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0},
							  {11,11,11,11,0,0,0,11,11,11,11,0,0,0,0,0},
							  {11,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0},
							  {11,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0},
							  {11,11,11,11,11,3,11,11,11,11,11,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};
							  
							 /*00,01,02,03,04,05,06,07,08,09,10,11,12,13,14,15*/
							  
	int ponte[16][16] =      {{07,07,07,07,02,02,02,02,02,02,07,00,00,00,00,00}, //9
							  {13,13,13,05,05,02,02,02,02,05,05,13,13,13,00,00},
							  {13,13,13,13,05,02,02,02,02,05,13,13,13,13,00,00},
							  {13,13,13,13,05,02,02,02,02,05,13,13,13,13,00,00},
							  {13,13,13,13,05,02,02,02,02,05,13,13,13,13,00,00},
							  {13,13,13,13,05,02,02,02,02,05,13,13,13,13,00,00},
							  {13,13,13,13,05,02,02,02,02,05,13,13,13,13,00,00},
							  {13,13,13,05,05,02,02,02,02,05,05,13,13,13,00,00},
							  {00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
							  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};
	};
	struct maam padrao,mutavel;
};

void Cenas::setcenario(int at){
	
	int p,l;
	
	switch(at){
		case 0:
			for(p=0; p<16; p++)
				for(l=0; l<16; l++)
					cenario[p][l] = mutavel.quarto[p][l];
			cmx = 0;
			cmy = 0;
			tmx = 6;
			tmy = 11;
			final = 8;
			break;
			
		case 1:
			for(p=0; p<16; p++)
				for(l=0; l<16; l++)
					cenario[p][l] = mutavel.sala[p][l];
			cmx = 0;
			cmy = 0;
			tmx = 6;
			tmy = 11;
			final = 8;
			break;
			
		case 2:
			for(p=0; p<16; p++)
				for(l=0; l<16; l++)
					cenario[p][l] = mutavel.frentecasa[p][l];
			cmx = 1;
			cmy = 0;
			tmx = 8;
			tmy = 11;
			final = 9;
			break;
			
		case 3:
			for(p=0; p<16; p++)
				for(l=0; l<16; l++)
					cenario[p][l] = mutavel.frenteviz[p][l];
			cmx = 1;
			cmy = 1;
			tmx = 8;
			tmy = 12;
			final = 9;
			break;
			
		case 4:
			for(p=0; p<16; p++)
				for(l=0; l<16; l++)
					cenario[p][l] = mutavel.salaviz[p][l];
			cmx = 0;
			cmy = 0;
			tmx = 6;
			tmy = 11;
			final = 8;
			break;
			
		case 5:
			for(p=0; p<16; p++)
				for(l=0; l<16; l++)
					cenario[p][l] = mutavel.quartoviz[p][l];
			cmx = 0;
			cmy = 0;
			tmx = 6;
			tmy = 11;
			final = 8;
			break;
			
		case 6:
			for(p=0; p<16; p++)
				for(l=0; l<16; l++)
					cenario[p][l] = mutavel.praca[p][l];
			cmx = 1;
			cmy = 1;
			tmx = 9;
			tmy = 12;
			final = 9;
			break;
		
		case 7:
			for(p=0; p<16; p++)
				for(l=0; l<16; l++)
					cenario[p][l] = mutavel.frentelab[p][l];
			cmx = 1;
			cmy = 0;
			tmx = 9;
			tmy = 11;
			final = 9;
			break;
			
		case 8:
			for(p=0; p<16; p++)
				for(l=0; l<16; l++)
					cenario[p][l] = mutavel.dentroLab[p][l];
			cmx = 0;
			cmy = 0;
			tmx = 8;
			tmy = 11;
			final = 9;
			break;
			
		case 9:
			for(p=0; p<16; p++)
				for(l=0; l<16; l++)
					cenario[p][l] = mutavel.ponte[p][l];
			cmx = 1;
			cmy = 0;
			tmx = 8;
			tmy = 13;
			final = 9;
			break;
	}
	
}

void Cenas::playerposition(int atual, int anterior, bool troca){
	
	if(troca){
		switch(atual){
			case 0:
				if(anterior == 1){
					if(posy == 9){
						posy = 8;
						posx = 1;
					}
					else{
						posy = 9;
						posx = 1;
					}
				}
				break;
				
			case 1:
			
				if(anterior == 0){
					
					if(posy == 9){
						posy = 8;
						posx = 1;
					}
					else{
						posy = 9;
						posx = 1;
					}
				}else if(anterior == 2){
					posy = 8;
					posx = 4;
				}
				break;
				
			case 2:
			
				if(anterior == 1){
					posx = 6;
					posy = 5;
					
				} else if(anterior == 3){
					posy = 10;
				
				} else if(anterior == 7){
					posx = 7;
					
				} else if(anterior == 9){
					posx = 1;
					
					if(posy == 6){
						posy = 10;
						
					}else if(posy == 5){
						posy = 9;
						
					}
					
				}
				break;
				
			case 3:
				
				if(anterior == 2){
					posy = 1;
				
				}else if(anterior == 4){
					posx = 6;
					posy = 6;
				
				}else if(anterior == 6){
					posx = 7;
					
				}else if(anterior == 9){
					posx = 1;
					
					if(posy == 7){
						posy = 1;
						
					}else if(posy == 8){
						posy = 2;
						
					}
					
				}
				break;
				
			case 4:
				
				if(anterior == 3){
					posx = 4;
					posy = 2;
				
				} else if(anterior == 5){
					
					if(posy == 2){
						posy = 1;
						posx = 1;
					}
					else{
						posy = 2;
						posx = 1;
					}
				}
				
				break;
			
			case 5:
				if(anterior == 4){
					if(posy == 1){
						posy = 2;
						posx = 1;
					}
					else{
						posy = 1;
						posx = 1;
					}
				}
				break;
			
			case 6:
				if(anterior == 3){
					posx = 1;
				
				}else if(anterior == 7){
					posy = 1;
					
				} 
				break;
				
			case 7:
				if(anterior == 6){
					posy = 10;
					
				} else if(anterior == 2){
					posx = 1;
					
				} else if(anterior == 8){
					posy = 4;
					posx = 7;
				}
				break;
			
			case 8:
				if(anterior == 7){
					posx = 6;
					posy = 5;
					
				}
				break;
				
			case 9:
				if(anterior == 2){
					posx = 7;
					
					if(posy == 10){
						posy = 6;
						
					}else if(posy == 9){
						posy = 5;
						
					}
					
				}else if(anterior == 3){
					posx = 7;
					
					if(posy == 1){
						posy = 7;
						
					}else if(posy == 2){
						posy = 8;
						
					}
				}
				break;
		}	
	} 
	
	cenario[posx][posy] = pixel;
}

void Cenas::imprimir(){
	
	int c1,c2;
	
	for(c1=cmx; c1<tmx; c1++){
		for(c2=cmy; c2<tmy; c2++){
			
			switch(cenario[c1][c2]){
			
				case 0:
					textbackground(YELLOW);
					cprintf(" ");
					break;
					
				case 1:
					textbackground(RED);
					cprintf(" ");
					break;
				
				case 2:
					textbackground(WHITE);
					cprintf(" ");
					break;
					
				case 3:
					textbackground(BROWN);
					cprintf(" ");
					break;
					
				case 4:
					textbackground(LIGHTGREEN);
					cprintf(" ");
					break;
				
				case 5:
					textbackground(LIGHTGRAY);
					cprintf(" ");
					break;
					
				case 6:
					textbackground(MAGENTA);
					cprintf(" ");
					break;
					
				case 7:
					textbackground(LIGHTBLUE);
					cprintf(" ");
					break;
					
				case 8:
					textbackground(LIGHTMAGENTA);
					cprintf(" ");
					break;
				
				case 12:
				case 9:
					textbackground(LIGHTRED);
					cprintf(" ");
					break;
					
				case 11:
					textbackground(DARKGRAY);
					cprintf(" ");
					break;
				
				case 13:
					textbackground(BLUE);
					cprintf(" ");
					break;
				
				case 14:
					textbackground(LIGHTCYAN);
					cprintf(" ");
					break;
			}
				
		}
		printf("\n");
	}
	
}

void Cenas::resetarCena(int anterior){
	
	int p,l;
	
	switch(anterior){
		
		case 0:
			for(p=0; p<16; p++)
				for(l=0; l<16; l++)
					mutavel.quarto[p][l] = padrao.quarto[p][l];
			break;
	}
	
}
#endif
